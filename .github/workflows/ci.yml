name: Playwright CI

on:
  push:
    branches: [main, allure-report]
  pull_request:
    branches: [main, allure-report]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Optional reason for manual run'
        required: false
        default: 'manual trigger'

permissions:
  contents: write
  pages: write
  id-token: write
  actions: write
  checks: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: task_user
          POSTGRES_PASSWORD: strongpassword
          POSTGRES_DB: task_storage
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U task_user -d task_storage"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 20
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    env:
      PW_BROWSER: ${{ matrix.browser }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-nm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nm-

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-pw-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-pw-

      - name: Install root dependencies
        run: npm install --no-audit --no-fund

      - name: Install Playwright browsers (if cache miss)
        run: |
          if [ ! -d ~/.cache/ms-playwright ] || [ -z "$(ls -A ~/.cache/ms-playwright)" ]; then
            npx playwright install --with-deps || true
          else
            echo "Playwright browsers cache found, skipping install."
          fi

      - name: Install system dependencies for WebKit
        if: matrix.browser == 'webkit'
        run: |
          echo "Installing system dependencies required by WebKit"
          # Always ensure system deps present even if browser cache hit
          npx playwright install-deps webkit || true
          # Fallback for missing WOFF2 decoder if still absent
          if ! ldconfig -p | grep -q libwoff2dec; then
            echo "libwoff2dec not found; installing fallback packages"
            sudo apt-get update && sudo apt-get install -y libwoff2dec1 libwoff2-1 || true
          fi
          ldconfig -p | (grep libwoff2dec || true)

      - name: Build sample-app (submodule)
        run: |
          if [ -f sample-app/package.json ]; then npm install --prefix sample-app --no-audit --no-fund; npm run build --prefix sample-app || true; fi

      - name: Initialize Postgres schema
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          echo "Waiting for Postgres to be ready..."
          for i in {1..60}; do
            if PGPASSWORD=strongpassword psql -h 127.0.0.1 -U task_user -d task_storage -c 'SELECT 1' >/dev/null 2>&1; then
              echo "Postgres is ready"; break; fi; sleep 2; done
          echo "Applying schema from sample-app/server/database.sql"
          PGPASSWORD=strongpassword psql -h 127.0.0.1 -U task_user -d task_storage -f sample-app/server/database.sql

      - name: Run Playwright tests (matrix- ${{ matrix.browser }})
        run: npx playwright test --project=${{ env.PW_BROWSER }}
        env:
          CI: true
          PW_BROWSER: ${{ matrix.browser }}
        continue-on-error: true

      - name: Ensure allure-results directory (even on failures)
        if: always()
        run: |
          mkdir -p allure-results
          echo "Root listing:" && ls -la || true
          echo "Allure listing (pre-upload):" && ls -la allure-results || true
      - name: Show Allure JSON count
        if: always()
        run: |
          count=$(ls -1 allure-results/*.json 2>/dev/null | wc -l | tr -d ' ')
          echo "Allure result JSON files: $count"
          if [ "$count" -eq 0 ]; then
            echo "WARNING: No Allure JSON files generated.";
            echo "Contents of playwright-report (if exists):";
            ls -R playwright-report || true;
          fi

      - name: Upload test results (Allure raw, per browser)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}
          path: allure-results
          if-no-files-found: ignore

      - name: Upload Playwright report (only once)
        if: always() && matrix.browser == 'chromium'
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: ignore

      - name: Upload traces (per browser)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: traces-${{ matrix.browser }}
          path: traces
          if-no-files-found: ignore

  aggregate-allure:
    name: Aggregate Allure Report
    runs-on: ubuntu-latest
    needs: tests
    if: always()
    steps:
      - name: Checkout (for report hosting context)
        uses: actions/checkout@v4

      - name: Cache Allure CLI
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-allure-cli-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-allure-cli-

      - name: Download Allure artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          path: merged-allure-results
          merge-multiple: true

      - name: Install Allure CLI (if cache miss)
        run: |
          if ! command -v allure >/dev/null 2>&1; then
            npm install -g allure-commandline || true
          else
            echo "Allure CLI found in cache, skipping install."
          fi
          sudo apt-get update && sudo apt-get install -y default-jre || true

      - name: Generate merged Allure report
        run: |
          allure generate merged-allure-results --clean -o merged-allure-report

      - name: Upload merged Allure HTML report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-merged
          path: merged-allure-report
          if-no-files-found: ignore

  deploy-pages:
    name: Deploy Allure Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: aggregate-allure
    if: always()
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download merged Allure HTML report artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report-merged
          path: site
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        env:
          # Fail softly if site not yet enabled
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
