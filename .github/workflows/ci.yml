name: Playwright CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Optional reason for manual run'
        required: false
        default: 'manual triggere '

permissions:
  contents: write
  pages: write
  id-token: write
  actions: write
  checks: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    env:
      PW_BROWSER: ${{ matrix.browser }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-nm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nm-

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-pw-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-pw-

      - name: Install root dependencies
        run: npm install --no-audit --no-fund

      - name: Install Playwright browsers (if cache miss)
        run: npx playwright install --with-deps || true

      - name: Build sample-app (submodule)
        run: |
          if [ -f sample-app/package.json ]; then npm install --prefix sample-app --no-audit --no-fund; npm run build --prefix sample-app || true; fi

      - name: Run Playwright tests (matrix- ${{ matrix.browser }})
        run: npx playwright test --reporter=line --project=${{ env.PW_BROWSER }}
        env:
          CI: true
          PW_BROWSER: ${{ matrix.browser }}

      - name: Upload test results (Allure raw, per browser)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}
          path: allure-results
          if-no-files-found: ignore

      - name: Upload Playwright report (only once)
        if: always() && matrix.browser == 'chromium'
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: ignore

      - name: Upload traces (per browser)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: traces-${{ matrix.browser }}
          path: traces
          if-no-files-found: ignore

  aggregate-allure:
    name: Aggregate Allure Report
    runs-on: ubuntu-latest
    needs: tests
    if: always()
    steps:
      - name: Checkout (for report hosting context)
        uses: actions/checkout@v4

      - name: Cache Allure CLI
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-allure-cli-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-allure-cli-

      - name: Download Allure artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          path: merged-allure-results
          merge-multiple: true

      - name: List merged results
        run: ls -R merged-allure-results || true

      - name: Install Allure CLI
        run: |
          npm install -g allure-commandline || true
          sudo apt-get update && sudo apt-get install -y default-jre || true

      - name: Generate merged Allure report
        run: |
          if [ -d merged-allure-results ] && [ "$(ls -A merged-allure-results)" ]; then
            allure generate merged-allure-results --clean -o merged-allure-report || true
          fi
          # Ensure directory exists even if generation produced nothing
          mkdir -p merged-allure-report
          if [ ! -f merged-allure-report/index.html ]; then
            echo "<html><body><h2>No Allure results were generated for this run.</h2><p>Check individual browser run artifacts (allure-results-*) for diagnostics.</p></body></html>" > merged-allure-report/index.html
          fi

      - name: Cache merged Allure report
        uses: actions/cache@v4
        with:
          path: merged-allure-report
          key: ${{ runner.os }}-allure-report-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-allure-report-

      - name: Upload merged Allure HTML report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-merged
          path: merged-allure-report
          if-no-files-found: ignore

  deploy-pages:
    name: Deploy Allure Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: aggregate-allure
    if: always()
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download merged Allure HTML report artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report-merged
          path: site
      - name: Setup Pages
        id: setup_pages
        uses: actions/configure-pages@v5
        with:
          enablement: true
      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          # Skip deploy if only placeholder (detect specific phrase)
          preview: false
        env:
          # Fail softly if site not yet enabled
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
